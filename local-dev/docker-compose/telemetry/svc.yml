---
version: '3.6'

services:
  server:
    container_name: arrow-svc-telemetry
    image: ${TELEMETRY_IMAGE}:${TELEMETRY_TAG}
    ports:
      - ${TELEMETRY_PORT_GRPC}:${TELEMETRY_PORT_GRPC}
      - ${TELEMETRY_PORT_REST}:${TELEMETRY_PORT_REST}
    volumes:
      - type: bind
        source: log4rs.yaml
        target: /log4rs.yaml
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr", "localhost:${TELEMETRY_PORT_GRPC}"]
      interval: 2s
      timeout: 1s
      retries: 3
    environment:
      - REDIS__URL
      - REDIS__POOL__MAX_SIZE
      - REDIS__POOL__TIMEOUTS__WAIT__SECS
      - REDIS__POOL__TIMEOUTS__WAIT__NANOS
      - STORAGE_HOST_GRPC=svc-storage
      - STORAGE_PORT_GRPC
      - GIS_PORT_GRPC
      - GIS_HOST_GRPC=svc-gis
      - DOCKER_PORT_REST=${TELEMETRY_PORT_REST}
      - DOCKER_PORT_GRPC=${TELEMETRY_PORT_GRPC}
      - AMQP__URL
      - AMQP__POOL__MAX_SIZE
      - AMQP__POOL__TIMEOUTS__WAIT__SECS
      - AMQP__POOL__TIMEOUTS__WAIT__NANOS
      - LOG_CONFIG
      - RINGBUFFER_SIZE_BYTES
      - GIS_PUSH_CADENCE_MS
      - GIS_MAX_MESSAGE_SIZE_BYTES
      - REST_REQUEST_LIMIT_PER_SECOND
      - REST_CONCURRENCY_LIMIT_PER_SERVICE
      - REST_CORS_ALLOWED_ORIGIN
      - LOG_CONFIG=log4rs.yaml
